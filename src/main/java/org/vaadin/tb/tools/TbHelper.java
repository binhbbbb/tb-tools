package org.vaadin.tb.tools;

import com.vaadin.ui.AbstractComponent;
import com.vaadin.ui.Component;
import java.lang.reflect.Field;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * A helper class to assign identifiers for fields to make integration testing
 * easier.
 *
 * TODO consider adding a method that assigns stylenames instead. Some
 * components are multpile times on the screen and autogenerated identifiers are
 * thus not handy.
 *
 * @author Matti Tahvonen
 */
public class TbHelper {

    public static final Set<String> ignordFields = new HashSet<>();

    static {
        ignordFields.add("UI");
        ignordFields.add("parent");
        ignordFields.add("root");
    }

    public static void assignIndentifiers(AbstractComponent component) {
        assignIndentifiers(component, component.getClass());
    }

    public static void assignIndentifiers(AbstractComponent instance, Class clazz) {
        assignIndentifiers(instance, clazz, "");
    }

    public static void assignIndentifiers(AbstractComponent instance, Class clazz,
            String prefix) {

        for (Field f : clazz.getDeclaredFields()) {
            if (!ignordFields.contains(f.getName()) && Component.class.
                    isAssignableFrom(f.getType())) {
                f.setAccessible(true);
                try {
                    AbstractComponent c = (AbstractComponent) f.get(instance);
                    if (c != null && c.getId() == null) {
                        c.setId(prefix + f.getName());
                    }
                } catch (IllegalArgumentException ex) {
                    Logger.getLogger(TbHelper.class.getName()).
                            log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(TbHelper.class.getName()).
                            log(Level.SEVERE, null, ex);
                }
            }
        }
        Class superclass = clazz.getSuperclass();
        if (superclass != AbstractComponent.class) {
            assignIndentifiers(instance, superclass, prefix);
        }
    }

    public static void assignIndentifiers(AbstractComponent... components) {
        for (AbstractComponent component : components) {
            assignIndentifiers(component);
        }
    }
}
